import streamlit as st
import ollama
import streamlit_authenticator as stauth
from streamlit_authenticator.utilities.hasher import Hasher
import json
import os

# ==============================
# üîí L·∫•y m·∫≠t kh·∫©u t·ª´ secrets
# ==============================
PASSWORD = st.secrets.get("app_password", None)
COOKIE_KEY = st.secrets.get("cookie_key", None)

if not PASSWORD:
    st.error("Kh√¥ng t√¨m th·∫•y 'app_password' trong secrets.toml")
    st.stop()

if not COOKIE_KEY:
    st.error("Kh√¥ng t√¨m th·∫•y 'cookie_key' trong secrets.toml")
    st.stop()

# Hash m·∫≠t kh·∫©u
hashed_passwords = Hasher.hash_list([PASSWORD])

# ==============================
# üõ† C·∫•u h√¨nh x√°c th·ª±c
# ==============================
config = {
    "credentials": {
        "usernames": {
            "user": {
                "name": "User",
                "password": hashed_passwords[0]
            }
        }
    },
    "cookie": {
        "name": "assistant_ai_cookie",
        "key": COOKIE_KEY,
        "expiry_days": 1
    }
}

# Kh·ªüi t·∫°o Authenticator
authenticator = stauth.Authenticate(
    config["credentials"],
    config["cookie"]["name"],
    config["cookie"]["key"],
    config["cookie"]["expiry_days"]
)

# ==============================
# üö™ Login
# ==============================
authenticator.login(location="main")
auth_status = st.session_state.get("authentication_status")
name = st.session_state.get("name")
username = st.session_state.get("username")

if auth_status:
    # Sidebar menu
    with st.sidebar:
        st.markdown(
            """
            <style>
            /* ƒê·∫£m b·∫£o sidebar ƒë·ªß r·ªông v√† c√°c ph·∫ßn t·ª≠ full width */
            .sidebar-title {font-size: 20px; font-weight: bold; margin-bottom: 16px;}
            .sidebar-menu {list-style: none; padding-left: 0;}
            .sidebar-menu li {
                width: 100% !important;
                box-sizing: border-box;
                padding: 0 0 0 0 !important;
                border-radius: 6px;
                margin-bottom: 12px;
                cursor: pointer;
                color: #131314;
                background: #8ab4f8;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 16px;
                font-weight: 500;
                transition: background 0.2s;
                margin-left: 0 !important;
            }
            .sidebar-menu li.active, .sidebar-menu li:hover {
                background-color: #8ab4f8 !important;
                color: #131314 !important;
            }
            /* ƒê·ªìng b·ªô chi·ªÅu ngang v·ªõi selectbox */
            .stSelectbox, .stSelectbox>div {
                width: 100% !important;
                min-width: 0 !important;
            }
            /* ·∫®n label selectbox n·∫øu mu·ªën */
            label[for="sidebar_model"] {display: none;}
            /* Canh l·ªÅ tr√°i cho c·∫£ selectbox v√† menu */
            .stSelectbox, .sidebar-menu {margin-left: 0 !important;}
            </style>
            """,
            unsafe_allow_html=True
        )
        st.markdown('<div class="sidebar-title"><i class="fas fa-robot"></i> Menu </div>', unsafe_allow_html=True)

        # Ch·ªçn model - chuy·ªÉn v√†o ƒë√¢y
        try:
            models = [m["model"] for m in ollama.list().get("models", [])]
        except Exception as e:
            st.error(f"L·ªói l·∫•y danh s√°ch model: {e}")
            st.stop()

        if not models:
            st.error("Kh√¥ng t√¨m th·∫•y model trong Ollama. H√£y ch·∫°y `ollama pull` tr∆∞·ªõc.")
            st.stop()

        selected_model = st.selectbox("Ch·ªçn model", models, index=0, key="sidebar_model")

        st.markdown(
            """
            <ul class="sidebar-menu">
                <li class="active"><i class="fas fa-comment-dots"></i> N√≥i c√°i kh√°c v·ªõi H√¢n</li>
            </ul>
            """,
            unsafe_allow_html=True
        )
        st.markdown(
            """
            <div class="sidebar-history">
                <h3>L·ªãch s·ª≠</h3>
                <ul>
                    <li class="active">C·∫≠p Nh·∫≠t UI V√† L·ªói</li>
                    <li>Office Leasing Data Req...</li>
                    <li>T·ª´ Ch·ªëi D·ªãch V·ª• N·ªôi Th·∫•t...</li>
                    <li>C√¥ng Th·ª©c X√°c ƒê·ªãnh C·∫•p...</li>
                    <li>Cu·ªôc g·ªçi b√°n h√†ng b·∫•t ƒë...</li>
                </ul>
            </div>
            """,
            unsafe_allow_html=True
        )
        st.markdown("---")
        st.button("ƒêƒÉng xu·∫•t", on_click=lambda: authenticator.logout("main"))

    st.title("üí¨ N√≥i Chuy·ªán V·ªõi H√¢n")

    # Load l·ªãch s·ª≠ chat
    history_file = st.secrets.get("history_file", "chat_history.json")
    if "messages" not in st.session_state:
        if os.path.exists(history_file):
            with open(history_file, "r", encoding="utf-8") as f:
                st.session_state.messages = json.load(f)
        else:
            st.session_state.messages = []

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    for msg in st.session_state.messages:
        st.chat_message(msg["role"]).write(msg["content"])

    # √î nh·∫≠p chat
    prompt = st.chat_input("Nh·∫≠p tin nh·∫Øn v√† nh·∫•n Enter...")
    if prompt:
        st.session_state.messages.append({"role": "user", "content": prompt})
        st.chat_message("user").write(prompt)

        with st.chat_message("assistant"):
            placeholder = st.empty()
            full = ""
            try:
                stream = ollama.chat(
                    model=st.session_state.get("sidebar_model", models[0]),
                    messages=st.session_state.messages,
                    stream=True
                )
                for chunk in stream:
                    token = chunk["message"]["content"]
                    full += token
                    placeholder.write(full)
            except Exception as e:
                st.error(f"L·ªói khi g·ªçi model: {e}")

            st.session_state.messages.append({"role": "assistant", "content": full})

        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng message ƒë·ªÉ tr√°nh file qu√° n·∫∑ng (vd 200 tin cu·ªëi)
        MAX_MESSAGES = 200
        if len(st.session_state.messages) > MAX_MESSAGES:
            st.session_state.messages = st.session_state.messages[-MAX_MESSAGES:]

        # L∆∞u l·ªãch s·ª≠ chat
        with open(history_file, "w", encoding="utf-8") as f:
            json.dump(st.session_state.messages, f, ensure_ascii=False, indent=2)

    # N√∫t ƒëƒÉng xu·∫•t
    authenticator.logout(location="main")

elif auth_status is False:
    st.error("Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u")
elif auth_status is None:
    st.warning("Vui l√≤ng nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p")

st.markdown(
    """
    <style>
    /* M√†u n·ªÅn t·ªïng th·ªÉ cho to√†n b·ªô app */
    body, .stApp {
        background-color: #1e1f20 !important;
        color: #e3e3e3 !important;
    }
    /* Sidebar ƒë·ªìng b·ªô m√†u */
    section[data-testid="stSidebar"] {
        background-color: #1e1f20 !important;
        color: #e3e3e3 !important;
        border-right: 1px solid #353739;
    }
    /* C√°c ph·∫ßn t·ª≠ trong sidebar */
    .sidebar-title, .sidebar-menu li, .sidebar-history li {
        color: #e3e3e3 !important;
    }
    .sidebar-menu li.active, .sidebar-menu li:hover {
        background-color: #8ab4f8 !important;
        color: #131314 !important;
    }
    .sidebar-history li.active, .sidebar-history li:hover {
        background-color: #353739 !important;
        color: #fff !important;
    }
    /* N√∫t ƒëƒÉng xu·∫•t */
    .stButton>button {
        background: #353739 !important;
        color: #e3e3e3 !important;
        border: none;
        border-radius: 6px;
        padding: 8px 16px;
        margin-top: 16px;
        transition: background 0.2s;
    }
    .stButton>button:hover {
        background: #8ab4f8 !important;
        color: #131314 !important;
    }
    </style>
    """,
    unsafe_allow_html=True
)
